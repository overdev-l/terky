{
  "version": 3,
  "sources": ["../utils/index.ts", "../index.ts"],
  "sourcesContent": ["const worker = `\nself.onmessage = function (e) {\n  const { url, init } = e.data\n  const request = () => {\n  return fetch(url, init)\n  }\n  request().then(async res => {\n  const result = await res.text()\n  self.postMessage(result)\n  })\n}\n`\n\nconst greenlet = () => {\n    const blob = new Blob([worker], { type: 'application/javascript' })\n    const workerUrl = URL.createObjectURL(blob)\n    const workerInstance = new Worker(workerUrl)\n    return (url: string, init: any): Promise<string> => new Promise((resolve, reject) => {\n        workerInstance.onmessage = e => {\n            resolve(e.data)\n        }\n        workerInstance.onerror = e => {\n            console.log(e, 'error')\n            reject(e)\n        }\n        workerInstance.postMessage({ url: url, init: init })\n    })\n}\n\nexport const useGreenlet = greenlet()\n", "import { useGreenlet } from './utils'\ninterface FecthInit {\n  method?: 'get' | 'post',\n  headers?: Headers,\n  body?: any,\n  mode?: any\n  credentials?: any\n  cache?: any\n  redirect?: any\n  referrer?: any\n  referrerPolicy?: any\n  integrity?: any\n}\ninterface Initial {\n  delay: number\n  url?: string\n  init?: FecthInit\n  key: string,\n  loop?: boolean\n}\ninterface Data {\n  siteHash: string | null,\n  currentHash: string | null\n}\nexport function useNotification(params: Initial) {\n  const regex = new RegExp(`${params.key}\\\\s*=\\\\s*['\"]([^'\"]+)['\"]`)\n  let timer: any\n  const sended = false\n  const loop = params.loop || false\n  const useCreateNotify = (notice: boolean, data: Data) => new CustomEvent('siteUpdate', {\n    bubbles: true,\n    detail: { data: data, status: notice }\n  })\n\n  const getCurrentHash = () => {\n    const body = document.querySelector('body')\n    if (!body) return ''\n    const hash = body.getAttribute('data-hash')\n    return hash\n  }\n\n  const currentHash = getCurrentHash()\n  const queryNewHash = useGreenlet.bind(null, params.url || `${window.origin}?t=${Date.now()}`, params.init || {\n    method: 'get'\n  })\n  const validateHash = async () => {\n    const hash = await queryNewHash()\n    const data = hash.match(regex)\n    return data ? data[1] || null : null\n  }\n  const initEvent = () => {\n    window.addEventListener('load', windowLoaded)\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n  }\n\n  const handleVisibilityChange = async () => {\n    if (document.visibilityState === 'visible') {\n      const hash = await validateHash()\n      if (hash !== currentHash) {\n        dispatchEvent(true, {\n          siteHash: hash,\n          currentHash: currentHash\n        })\n      } else {\n        initTimer()\n      }\n    } else {\n      clearInterval(timer)\n    }\n  }\n  const windowLoaded = async () => {\n    const hash = await validateHash()\n    if (hash !== currentHash) {\n      dispatchEvent(true, {\n        siteHash: hash,\n        currentHash: currentHash\n      })\n    }\n  }\n  const dispatchEvent = (status: boolean, data: Data) => {\n    if (!loop && sended){\n      disposeUpdate()\n      return\n    }\n    const notice = useCreateNotify(status, data)\n    window.dispatchEvent(notice)\n  }\n  const initTimer = () => {\n    timer = setInterval(async () => {\n      const hash = await validateHash()\n      if (hash !== currentHash) {\n        dispatchEvent(true, {\n          siteHash: hash,\n          currentHash: currentHash\n        })\n      }\n    }, params.delay)\n  }\n  if (!currentHash) return\n  initEvent()\n  initTimer()\n\n  const disposeUpdate = () => {\n    clearInterval(timer)\n    window.removeEventListener('load', windowLoaded)\n    window.removeEventListener('visibilitychange', handleVisibilityChange)\n  }\n}\n"],
  "mappings": "AAAA,IAAMA,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaTC,EAAW,IAAM,CACnB,IAAMC,EAAO,IAAI,KAAK,CAACF,CAAM,EAAG,CAAE,KAAM,wBAAyB,CAAC,EAC5DG,EAAY,IAAI,gBAAgBD,CAAI,EACpCE,EAAiB,IAAI,OAAOD,CAAS,EAC3C,MAAO,CAACE,EAAaC,IAA+B,IAAI,QAAQ,CAACC,EAASC,IAAW,CACjFJ,EAAe,UAAYK,GAAK,CAC5BF,EAAQE,EAAE,IAAI,CAClB,EACAL,EAAe,QAAUK,GAAK,CAC1B,QAAQ,IAAIA,EAAG,OAAO,EACtBD,EAAOC,CAAC,CACZ,EACAL,EAAe,YAAY,CAAE,IAAKC,EAAK,KAAMC,CAAK,CAAC,CACvD,CAAC,CACL,EAEaI,EAAcT,EAAS,ECL7B,SAASU,EAAgBC,EAAiB,CAC/C,IAAMC,EAAQ,IAAI,OAAO,GAAGD,EAAO,8BAA8B,EAC7DE,EACEC,EAAS,GACTC,EAAOJ,EAAO,MAAQ,GACtBK,EAAkB,CAACC,EAAiBC,IAAe,IAAI,YAAY,aAAc,CACrF,QAAS,GACT,OAAQ,CAAE,KAAMA,EAAM,OAAQD,CAAO,CACvC,CAAC,EASKE,GAPiB,IAAM,CAC3B,IAAMC,EAAO,SAAS,cAAc,MAAM,EAC1C,OAAKA,EACQA,EAAK,aAAa,WAAW,EADxB,EAGpB,GAEmC,EAC7BC,EAAeC,EAAY,KAAK,KAAMX,EAAO,KAAO,GAAG,OAAO,YAAY,KAAK,IAAI,IAAKA,EAAO,MAAQ,CAC3G,OAAQ,KACV,CAAC,EACKY,EAAe,SAAY,CAE/B,IAAML,GADO,MAAMG,EAAa,GACd,MAAMT,CAAK,EAC7B,OAAOM,GAAOA,EAAK,CAAC,GAAK,IAC3B,EACMM,EAAY,IAAM,CACtB,OAAO,iBAAiB,OAAQC,CAAY,EAC5C,SAAS,iBAAiB,mBAAoBC,CAAsB,CACtE,EAEMA,EAAyB,SAAY,CACzC,GAAI,SAAS,kBAAoB,UAAW,CAC1C,IAAMC,EAAO,MAAMJ,EAAa,EAC5BI,IAASR,EACXS,EAAc,GAAM,CAClB,SAAUD,EACV,YAAaR,CACf,CAAC,EAEDU,EAAU,OAGZ,cAAchB,CAAK,CAEvB,EACMY,EAAe,SAAY,CAC/B,IAAME,EAAO,MAAMJ,EAAa,EAC5BI,IAASR,GACXS,EAAc,GAAM,CAClB,SAAUD,EACV,YAAaR,CACf,CAAC,CAEL,EACMS,EAAgB,CAACE,EAAiBZ,IAAe,CACrD,GAAI,CAACH,GAAQD,EAAO,CAClBiB,EAAc,EACd,OAEF,IAAMd,EAASD,EAAgBc,EAAQZ,CAAI,EAC3C,OAAO,cAAcD,CAAM,CAC7B,EACMY,EAAY,IAAM,CACtBhB,EAAQ,YAAY,SAAY,CAC9B,IAAMc,EAAO,MAAMJ,EAAa,EAC5BI,IAASR,GACXS,EAAc,GAAM,CAClB,SAAUD,EACV,YAAaR,CACf,CAAC,CAEL,EAAGR,EAAO,KAAK,CACjB,EACA,GAAI,CAACQ,EAAa,OAClBK,EAAU,EACVK,EAAU,EAEV,IAAME,EAAgB,IAAM,CAC1B,cAAclB,CAAK,EACnB,OAAO,oBAAoB,OAAQY,CAAY,EAC/C,OAAO,oBAAoB,mBAAoBC,CAAsB,CACvE,CACF",
  "names": ["worker", "greenlet", "blob", "workerUrl", "workerInstance", "url", "init", "resolve", "reject", "e", "useGreenlet", "useNotification", "params", "regex", "timer", "sended", "loop", "useCreateNotify", "notice", "data", "currentHash", "body", "queryNewHash", "useGreenlet", "validateHash", "initEvent", "windowLoaded", "handleVisibilityChange", "hash", "dispatchEvent", "initTimer", "status", "disposeUpdate"]
}
