{
  "version": 3,
  "sources": ["../utils/index.ts", "../index.ts"],
  "sourcesContent": ["const worker = `\nself.onmessage = function (e) {\n  const { url, init } = e.data\n  const request = () => {\n  return fetch(url, init)\n  }\n  request().then(async res => {\n  const result = await res.text()\n  self.postMessage(result)\n  })\n}\n`\n\nconst greenlet = () => {\n    const blob = new Blob([worker], { type: 'application/javascript' })\n    const workerUrl = URL.createObjectURL(blob)\n    const workerInstance = new Worker(workerUrl)\n    return (url: string, init: any): Promise<string> => new Promise((resolve, reject) => {\n        workerInstance.onmessage = e => {\n            resolve(e.data)\n        }\n        workerInstance.onerror = e => {\n            console.log(e, 'error')\n            reject(e)\n        }\n        workerInstance.postMessage({ url: url, init: init })\n    })\n}\n\nexport const useGreenlet = greenlet()\n", "import { useGreenlet } from './utils'\ninterface FecthInit {\n  method?: 'get' | 'post',\n  headers?: Headers,\n  body?: any,\n  mode?: any\n  credentials?: any\n  cache?: any\n  redirect?: any\n  referrer?: any\n  referrerPolicy?: any\n  integrity?: any\n}\ninterface Initial {\n  delay: number\n  url?: string\n  init?: FecthInit\n  key: string,\n  loop?: boolean\n}\nexport function useNotification(params: Initial) {\n  const regex = new RegExp(`${params.key}\\\\s*=\\\\s*['\"]([^'\"]+)['\"]`)\n  let timer: any\n  let sended = false\n  const loop = params.loop || false\n  const useCreateNotify = (notice: boolean) => new CustomEvent('siteUpdate', {\n    bubbles: true,\n    detail: { data: notice }\n  })\n\n  const getCurrentHash = () => {\n    const body = document.querySelector('body')\n    if (!body) return false\n    const hash = body.getAttribute('data-hash')\n    return hash\n  }\n\n  const currentHash = getCurrentHash()\n  const queryNewHash = useGreenlet.bind(null, params.url || `${window.origin}?t=${Date.now()}`, params.init || {\n    method: 'get'\n  })\n  const validateHash = async () => {\n    const hash = await queryNewHash()\n    const data = hash.match(regex)\n    console.log(data, 'data')\n    return data ? data[1] || null : null\n  }\n  const initEvent = () => {\n    window.addEventListener('load', windowLoaded)\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n  }\n\n  const handleVisibilityChange = async () => {\n    if (document.visibilityState === 'visible') {\n      const hash = await validateHash()\n      console.log(hash, currentHash, typeof hash, typeof currentHash, hash !== currentHash, 'hash !== currentHash')\n      if (hash !== currentHash) {\n        dispatchEvent(true)\n      } else {\n        initTimer()\n      }\n    } else {\n      clearInterval(timer)\n    }\n  }\n  const windowLoaded = async () => {\n    const hash = await validateHash()\n    console.log(hash, currentHash, typeof hash, typeof currentHash, hash !== currentHash, 'hash !== currentHash')\n    if (hash !== currentHash) {\n      dispatchEvent(true)\n    }\n  }\n  const dispatchEvent = (status: boolean) => {\n    if (!loop && sended) return\n    if (status) {\n      sended = true\n    }\n    const notice = useCreateNotify(status)\n    window.dispatchEvent(notice)\n  }\n  const initTimer = () => {\n    timer = setInterval(async () => {\n      const hash = await validateHash()\n      console.log(hash, currentHash, typeof hash, typeof currentHash, hash !== currentHash, 'hash !== currentHash')\n      if (hash !== currentHash) {\n        dispatchEvent(true)\n      }\n    }, params.delay)\n  }\n  if (!currentHash) return\n  initEvent()\n  initTimer()\n}\n"],
  "mappings": "AAAA,IAAMA,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaTC,EAAW,IAAM,CACnB,IAAMC,EAAO,IAAI,KAAK,CAACF,CAAM,EAAG,CAAE,KAAM,wBAAyB,CAAC,EAC5DG,EAAY,IAAI,gBAAgBD,CAAI,EACpCE,EAAiB,IAAI,OAAOD,CAAS,EAC3C,MAAO,CAACE,EAAaC,IAA+B,IAAI,QAAQ,CAACC,EAASC,IAAW,CACjFJ,EAAe,UAAYK,GAAK,CAC5BF,EAAQE,EAAE,IAAI,CAClB,EACAL,EAAe,QAAUK,GAAK,CAC1B,QAAQ,IAAIA,EAAG,OAAO,EACtBD,EAAOC,CAAC,CACZ,EACAL,EAAe,YAAY,CAAE,IAAKC,EAAK,KAAMC,CAAK,CAAC,CACvD,CAAC,CACL,EAEaI,EAAcT,EAAS,ECT7B,SAASU,EAAgBC,EAAiB,CAC/C,IAAMC,EAAQ,IAAI,OAAO,GAAGD,EAAO,8BAA8B,EAC7DE,EACAC,EAAS,GACPC,EAAOJ,EAAO,MAAQ,GACtBK,EAAmBC,GAAoB,IAAI,YAAY,aAAc,CACzE,QAAS,GACT,OAAQ,CAAE,KAAMA,CAAO,CACzB,CAAC,EASKC,GAPiB,IAAM,CAC3B,IAAMC,EAAO,SAAS,cAAc,MAAM,EAC1C,OAAKA,EACQA,EAAK,aAAa,WAAW,EADxB,EAGpB,GAEmC,EAC7BC,EAAeC,EAAY,KAAK,KAAMV,EAAO,KAAO,GAAG,OAAO,YAAY,KAAK,IAAI,IAAKA,EAAO,MAAQ,CAC3G,OAAQ,KACV,CAAC,EACKW,EAAe,SAAY,CAE/B,IAAMC,GADO,MAAMH,EAAa,GACd,MAAMR,CAAK,EAC7B,eAAQ,IAAIW,EAAM,MAAM,EACjBA,GAAOA,EAAK,CAAC,GAAK,IAC3B,EACMC,EAAY,IAAM,CACtB,OAAO,iBAAiB,OAAQC,CAAY,EAC5C,SAAS,iBAAiB,mBAAoBC,CAAsB,CACtE,EAEMA,EAAyB,SAAY,CACzC,GAAI,SAAS,kBAAoB,UAAW,CAC1C,IAAMC,EAAO,MAAML,EAAa,EAChC,QAAQ,IAAIK,EAAMT,EAAa,OAAOS,EAAM,OAAOT,EAAaS,IAAST,EAAa,sBAAsB,EACxGS,IAAST,EACXU,EAAc,EAAI,EAElBC,EAAU,OAGZ,cAAchB,CAAK,CAEvB,EACMY,EAAe,SAAY,CAC/B,IAAME,EAAO,MAAML,EAAa,EAChC,QAAQ,IAAIK,EAAMT,EAAa,OAAOS,EAAM,OAAOT,EAAaS,IAAST,EAAa,sBAAsB,EACxGS,IAAST,GACXU,EAAc,EAAI,CAEtB,EACMA,EAAiBE,GAAoB,CACzC,GAAI,CAACf,GAAQD,EAAQ,OACjBgB,IACFhB,EAAS,IAEX,IAAMG,EAASD,EAAgBc,CAAM,EACrC,OAAO,cAAcb,CAAM,CAC7B,EACMY,EAAY,IAAM,CACtBhB,EAAQ,YAAY,SAAY,CAC9B,IAAMc,EAAO,MAAML,EAAa,EAChC,QAAQ,IAAIK,EAAMT,EAAa,OAAOS,EAAM,OAAOT,EAAaS,IAAST,EAAa,sBAAsB,EACxGS,IAAST,GACXU,EAAc,EAAI,CAEtB,EAAGjB,EAAO,KAAK,CACjB,EACKO,IACLM,EAAU,EACVK,EAAU,EACZ",
  "names": ["worker", "greenlet", "blob", "workerUrl", "workerInstance", "url", "init", "resolve", "reject", "e", "useGreenlet", "useNotification", "params", "regex", "timer", "sended", "loop", "useCreateNotify", "notice", "currentHash", "body", "queryNewHash", "useGreenlet", "validateHash", "data", "initEvent", "windowLoaded", "handleVisibilityChange", "hash", "dispatchEvent", "initTimer", "status"]
}
